{"file":"E:\\Projects\\react-use-hook\\src\\hooks\\useOpenLibrary.test.tsx","mappings":";;;;;AAAA,kDAAkD;AAClD,mFAA2D;AAC3D,sEAA8C;AAE9C,MAAM,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,4BAAkB,CAAC,CAAC;AAElD,UAAU,CAAC,GAAG,EAAE;IACZ,6DAA6D;IAC9D,aAAa;IACZ,aAAa,CAAC,SAAS,EAAE,CAAC;IAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;AACzB,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,GAAG,EAAE;IACX,IAAI,CAAC,aAAa,EAAE,CAAC;AACzB,CAAC,CAAC,CAAC;AAEH,EAAE,CAAC,6BAA6B,EAAE,GAAG,EAAE;IACnC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAA,kBAAU,EAAC,GAAG,EAAE,CAAC,IAAA,wBAAc,EAAC,EAAE,CAAC,CAAC,CAAC;IAExD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IACzC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC;IAC7C,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;AAC/C,CAAC,CAAC,CAAC;AAEH,0EAA0E;AAC1E,sBAAsB;AACtB,mGAAmG;AACnG,kGAAkG;AAClG,SAAS;AACT,EAAE;AACF,8CAA8C;AAC9C,EAAE;AACF,mEAAmE;AACnE,EAAE;AACF,kBAAkB;AAClB,yCAAyC;AACzC,UAAU;AACV,EAAE;AACF,qDAAqD;AACrD,EAAE;AACF,yEAAyE;AACzE,EAAE;AACF,2DAA2D;AAC3D,+DAA+D;AAC/D,mDAAmD;AACnD,kDAAkD;AAClD,MAAM;AAEN,iDAAiD;AACjD,qEAAqE;AACrE,EAAE;AACF,mEAAmE;AACnE,EAAE;AACF,kBAAkB;AAClB,yCAAyC;AACzC,UAAU;AACV,EAAE;AACF,qDAAqD;AACrD,EAAE;AACF,yEAAyE;AACzE,EAAE;AACF,2DAA2D;AAC3D,+DAA+D;AAC/D,gDAAgD;AAChD,mDAAmD;AACnD,MAAM","names":[],"sources":["E:\\Projects\\react-use-hook\\src\\hooks\\useOpenLibrary.test.tsx"],"sourcesContent":["import {renderHook} from \"@testing-library/react\";\r\nimport fetchIsOpenLibrary from \"../api/fetchIsOpenLibrary\";\r\nimport useOpenLibrary from \"./useOpenLibrary\";\r\n\r\nconst mockFetchFunc = jest.fn(fetchIsOpenLibrary);\r\n\r\nbeforeEach(() => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n   // @ts-ignore\r\n    mockFetchFunc.mockClear();\r\n    jest.useFakeTimers();\r\n});\r\n\r\nafterEach(() => {\r\n    jest.useRealTimers();\r\n});\r\n\r\nit('should return initial state', () => {\r\n    const { result } = renderHook(() => useOpenLibrary(''));\r\n\r\n    expect(result.current.books).toEqual([]);\r\n    expect(result.current.isLoading).toBeFalsy();\r\n    expect(result.current.isError).toBeFalsy();\r\n});\r\n\r\n// it('should fetch books and state update on query change', async () => {\r\n//     const books = [\r\n//         { key: 'key1', title: 'Title 1', author_name: ['Author name 1'], first_publish_year: 1},\r\n//         { key: 'key2', title: 'Title 2', author_name: ['Author name 2'], first_publish_year: 1}\r\n//     ];\r\n//\r\n//     mockFetchFunc.mockResolvedValue(books);\r\n//\r\n//     const { result } = renderHook(() => useOpenLibrary('test'));\r\n//\r\n//     act(() => {\r\n//         jest.advanceTimersByTime(500);\r\n//     });\r\n//\r\n//     expect(result.current.isLoading).toBeTruthy();\r\n//\r\n//     await waitFor(() => expect(result.current.isLoading).toBeFalsy());\r\n//\r\n//     expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);\r\n//     expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');\r\n//     expect(result.current.books).toEqual(books);\r\n//     expect(result.current.isError).toBeFalsy();\r\n// });\r\n\r\n// it('should handle fetch errors', async () => {\r\n//     mockFetchFunc.mockRejectedValue(new Error('Failed to fetch'));\r\n//\r\n//     const { result } = renderHook(() => useOpenLibrary('test'));\r\n//\r\n//     act(() => {\r\n//         jest.advanceTimersByTime(500);\r\n//     });\r\n//\r\n//     expect(result.current.isLoading).toBeTruthy();\r\n//\r\n//     await waitFor(() => expect(result.current.isLoading).toBeFalsy());\r\n//\r\n//     expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);\r\n//     expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');\r\n//     expect(result.current.books).toEqual([]);\r\n//     expect(result.current.isError).toBeTruthy();\r\n// });\r\n"],"version":3}