0dd669f31050a859684d6d152da8d974
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("@testing-library/react");
const fetchIsOpenLibrary_1 = __importDefault(require("../api/fetchIsOpenLibrary"));
const useOpenLibrary_1 = __importDefault(require("./useOpenLibrary"));
const test_utils_1 = require("react-dom/test-utils");
const mockFetchFunc = jest.fn(fetchIsOpenLibrary_1.default);
beforeEach(() => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    mockFetchFunc.mockClear();
    jest.useFakeTimers();
});
afterEach(() => {
    jest.useRealTimers();
});
it('should return initial state', () => {
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)(''));
    expect(result.current.books).toEqual([]);
    expect(result.current.isLoading).toBeFalsy();
    expect(result.current.isError).toBeFalsy();
});
it('should fetch books and state update on query change', async () => {
    const books = [
        { key: 'key1', title: 'Title 1', author_name: ['Author name 1'], first_publish_year: 1 },
        { key: 'key2', title: 'Title 2', author_name: ['Author name 2'], first_publish_year: 1 }
    ];
    mockFetchFunc.mockResolvedValue(books);
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)('test'));
    (0, test_utils_1.act)(() => {
        jest.advanceTimersByTime(500);
    });
    expect(result.current.isLoading).toBeTruthy();
    await (0, react_1.waitFor)(() => expect(result.current.isLoading).toBeFalsy());
    // expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledWith('test');
    expect(result.current.books).toEqual(books);
    expect(result.current.isError).toBeFalsy();
});
// it('should handle fetch errors', async () => {
//     mockFetchFunc.mockRejectedValue(new Error('Failed to fetch'));
//
//     const { result } = renderHook(() => useOpenLibrary('test'));
//
//     act(() => {
//         jest.advanceTimersByTime(500);
//     });
//
//     expect(result.current.isLoading).toBeTruthy();
//
//     await waitFor(() => expect(result.current.isLoading).toBeFalsy());
//
//     expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);
//     expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');
//     expect(result.current.books).toEqual([]);
//     expect(result.current.isError).toBeTruthy();
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXFByb2plY3RzXFxyZWFjdC11c2UtaG9va1xcc3JjXFxob29rc1xcdXNlT3BlbkxpYnJhcnkudGVzdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMkQ7QUFDM0QsbUZBQTJEO0FBQzNELHNFQUE4QztBQUM5QyxxREFBeUM7QUFFekMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyw0QkFBa0IsQ0FBQyxDQUFDO0FBRWxELFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDWiw2REFBNkQ7SUFDOUQsYUFBYTtJQUNaLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ1gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxrQkFBVSxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsd0JBQWMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXhELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FBRztRQUNWLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsRUFBQztRQUN2RixFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLEVBQUM7S0FDMUYsQ0FBQztJQUVGLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2QyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxrQkFBVSxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsd0JBQWMsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRTVELElBQUEsZ0JBQUcsRUFBQyxHQUFHLEVBQUU7UUFDTCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUU5QyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFFbEUsdURBQXVEO0lBQ3ZELE1BQU0sQ0FBQyw0QkFBa0IsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQztBQUVILGlEQUFpRDtBQUNqRCxxRUFBcUU7QUFDckUsRUFBRTtBQUNGLG1FQUFtRTtBQUNuRSxFQUFFO0FBQ0Ysa0JBQWtCO0FBQ2xCLHlDQUF5QztBQUN6QyxVQUFVO0FBQ1YsRUFBRTtBQUNGLHFEQUFxRDtBQUNyRCxFQUFFO0FBQ0YseUVBQXlFO0FBQ3pFLEVBQUU7QUFDRiwyREFBMkQ7QUFDM0QsK0RBQStEO0FBQy9ELGdEQUFnRDtBQUNoRCxtREFBbUQ7QUFDbkQsTUFBTSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJFOlxcUHJvamVjdHNcXHJlYWN0LXVzZS1ob29rXFxzcmNcXGhvb2tzXFx1c2VPcGVuTGlicmFyeS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlbmRlckhvb2ssIHdhaXRGb3J9IGZyb20gXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI7XHJcbmltcG9ydCBmZXRjaElzT3BlbkxpYnJhcnkgZnJvbSBcIi4uL2FwaS9mZXRjaElzT3BlbkxpYnJhcnlcIjtcclxuaW1wb3J0IHVzZU9wZW5MaWJyYXJ5IGZyb20gXCIuL3VzZU9wZW5MaWJyYXJ5XCI7XHJcbmltcG9ydCB7YWN0fSBmcm9tIFwicmVhY3QtZG9tL3Rlc3QtdXRpbHNcIjtcclxuXHJcbmNvbnN0IG1vY2tGZXRjaEZ1bmMgPSBqZXN0LmZuKGZldGNoSXNPcGVuTGlicmFyeSk7XHJcblxyXG5iZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcclxuICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgbW9ja0ZldGNoRnVuYy5tb2NrQ2xlYXIoKTtcclxuICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xyXG59KTtcclxuXHJcbmFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcclxufSk7XHJcblxyXG5pdCgnc2hvdWxkIHJldHVybiBpbml0aWFsIHN0YXRlJywgKCkgPT4ge1xyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlT3BlbkxpYnJhcnkoJycpKTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYm9va3MpLnRvRXF1YWwoW10pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZUZhbHN5KCk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNFcnJvcikudG9CZUZhbHN5KCk7XHJcbn0pO1xyXG5cclxuaXQoJ3Nob3VsZCBmZXRjaCBib29rcyBhbmQgc3RhdGUgdXBkYXRlIG9uIHF1ZXJ5IGNoYW5nZScsIGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IGJvb2tzID0gW1xyXG4gICAgICAgIHsga2V5OiAna2V5MScsIHRpdGxlOiAnVGl0bGUgMScsIGF1dGhvcl9uYW1lOiBbJ0F1dGhvciBuYW1lIDEnXSwgZmlyc3RfcHVibGlzaF95ZWFyOiAxfSxcclxuICAgICAgICB7IGtleTogJ2tleTInLCB0aXRsZTogJ1RpdGxlIDInLCBhdXRob3JfbmFtZTogWydBdXRob3IgbmFtZSAyJ10sIGZpcnN0X3B1Ymxpc2hfeWVhcjogMX1cclxuICAgIF07XHJcblxyXG4gICAgbW9ja0ZldGNoRnVuYy5tb2NrUmVzb2x2ZWRWYWx1ZShib29rcyk7XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlT3BlbkxpYnJhcnkoJ3Rlc3QnKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVUcnV0aHkoKTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVGYWxzeSgpKTtcclxuXHJcbiAgICAvLyBleHBlY3QoZmV0Y2hJc09wZW5MaWJyYXJ5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICBleHBlY3QoZmV0Y2hJc09wZW5MaWJyYXJ5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndGVzdCcpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmJvb2tzKS50b0VxdWFsKGJvb2tzKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0Vycm9yKS50b0JlRmFsc3koKTtcclxufSk7XHJcblxyXG4vLyBpdCgnc2hvdWxkIGhhbmRsZSBmZXRjaCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XHJcbi8vICAgICBtb2NrRmV0Y2hGdW5jLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoJykpO1xyXG4vL1xyXG4vLyAgICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlT3BlbkxpYnJhcnkoJ3Rlc3QnKSk7XHJcbi8vXHJcbi8vICAgICBhY3QoKCkgPT4ge1xyXG4vLyAgICAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg1MDApO1xyXG4vLyAgICAgfSk7XHJcbi8vXHJcbi8vICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlVHJ1dGh5KCk7XHJcbi8vXHJcbi8vICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVGYWxzeSgpKTtcclxuLy9cclxuLy8gICAgIGV4cGVjdChmZXRjaElzT3BlbkxpYnJhcnkpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuLy8gICAgIGV4cGVjdChmZXRjaElzT3BlbkxpYnJhcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0Jyk7XHJcbi8vICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYm9va3MpLnRvRXF1YWwoW10pO1xyXG4vLyAgICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRXJyb3IpLnRvQmVUcnV0aHkoKTtcclxuLy8gfSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==