b9bbb129c40af39463702b9094ebe759
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../api/fetchIsOpenLibrary', () => ({
    fetchIsOpenLibrary: jest.fn()
}));
const react_1 = require("@testing-library/react");
const fetchIsOpenLibrary_1 = __importDefault(require("../api/fetchIsOpenLibrary"));
const useOpenLibrary_1 = __importDefault(require("./useOpenLibrary"));
const test_utils_1 = require("react-dom/test-utils");
beforeEach(() => {
    // @ts-ignore
    fetchIsOpenLibrary_1.default.mockClear();
    jest.useFakeTimers();
});
afterEach(() => {
    jest.useRealTimers();
});
it('should return initial state', () => {
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)(''));
    expect(result.current.books).toEqual([]);
    expect(result.current.isLoading).toBeFalsy();
    expect(result.current.isError).toBeFalsy();
});
it('should fetch books and state update on query change', async () => {
    const books = [
        { key: 'key1', title: 'Title 1', author_name: ['Author name 1'], first_publish_year: 1 },
        { key: 'key2', title: 'Title 2', author_name: ['Author name 2'], first_publish_year: 1 }
    ];
    // @ts-ignore
    fetchIsOpenLibrary_1.default.mockResolvedValue(books);
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)('test'));
    (0, test_utils_1.act)(() => {
        jest.advanceTimersByTime(500);
    });
    expect(result.current.isLoading).toBeTruthy();
    await (0, react_1.waitFor)(() => expect(result.current.isLoading).toBeFalsy());
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledTimes(1);
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledWith('test');
    expect(result.current.books).toEqual(books);
    expect(result.current.isError).toBeFalsy();
});
it('should handle fetch errors', async () => {
    // @ts-ignore
    fetchIsOpenLibrary_1.default.mockRejectedValue(new Error('Failed to fetch'));
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)('test'));
    (0, test_utils_1.act)(() => {
        jest.advanceTimersByTime(500);
    });
    expect(result.current.isLoading).toBeTruthy();
    await (0, react_1.waitFor)(() => expect(result.current.isLoading).toBeFalsy());
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledTimes(1);
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledWith('test');
    expect(result.current.books).toEqual([]);
    expect(result.current.isError).toBeTruthy();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXFByb2plY3RzXFxyZWFjdC11c2UtaG9va1xcc3JjXFxob29rc1xcdXNlT3BlbkxpYnJhcnkudGVzdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFLQSxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDMUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUNoQyxDQUFDLENBQUMsQ0FBQztBQVBKLGtEQUEyRDtBQUMzRCxtRkFBMkQ7QUFDM0Qsc0VBQThDO0FBQzlDLHFEQUF5QztBQU16QyxVQUFVLENBQUMsR0FBRyxFQUFFO0lBQ2IsYUFBYTtJQUNaLDRCQUFrQixDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQy9CLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN6QixDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDWCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO0lBQ25DLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFBLGtCQUFVLEVBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSx3QkFBYyxFQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzdDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQy9DLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2pFLE1BQU0sS0FBSyxHQUFHO1FBQ1YsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxFQUFDO1FBQ3ZGLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsRUFBQztLQUMxRixDQUFDO0lBRUYsYUFBYTtJQUNiLDRCQUFrQixDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRTVDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFBLGtCQUFVLEVBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSx3QkFBYyxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFNUQsSUFBQSxnQkFBRyxFQUFDLEdBQUcsRUFBRTtRQUNMLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRTlDLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUVsRSxNQUFNLENBQUMsNEJBQWtCLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsNEJBQWtCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDL0MsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDeEMsYUFBYTtJQUNiLDRCQUFrQixDQUFDLGlCQUFpQixDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUVuRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxrQkFBVSxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsd0JBQWMsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRTVELElBQUEsZ0JBQUcsRUFBQyxHQUFHLEVBQUU7UUFDTCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUU5QyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFFbEUsTUFBTSxDQUFDLDRCQUFrQixDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLDRCQUFrQixDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ2hELENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkU6XFxQcm9qZWN0c1xccmVhY3QtdXNlLWhvb2tcXHNyY1xcaG9va3NcXHVzZU9wZW5MaWJyYXJ5LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVuZGVySG9vaywgd2FpdEZvcn0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IGZldGNoSXNPcGVuTGlicmFyeSBmcm9tIFwiLi4vYXBpL2ZldGNoSXNPcGVuTGlicmFyeVwiO1xyXG5pbXBvcnQgdXNlT3BlbkxpYnJhcnkgZnJvbSBcIi4vdXNlT3BlbkxpYnJhcnlcIjtcclxuaW1wb3J0IHthY3R9IGZyb20gXCJyZWFjdC1kb20vdGVzdC11dGlsc1wiO1xyXG5cclxuamVzdC5tb2NrKCcuLi9hcGkvZmV0Y2hJc09wZW5MaWJyYXJ5JywgKCkgPT4gKHtcclxuICAgIGZldGNoSXNPcGVuTGlicmFyeTogamVzdC5mbigpXHJcbn0pKTtcclxuXHJcbmJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAvLyBAdHMtaWdub3JlXHJcbiAgICBmZXRjaElzT3BlbkxpYnJhcnkubW9ja0NsZWFyKCk7XHJcbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcclxufSk7XHJcblxyXG5hZnRlckVhY2goKCkgPT4ge1xyXG4gICAgamVzdC51c2VSZWFsVGltZXJzKCk7XHJcbn0pO1xyXG5cclxuaXQoJ3Nob3VsZCByZXR1cm4gaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZU9wZW5MaWJyYXJ5KCcnKSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmJvb2tzKS50b0VxdWFsKFtdKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVGYWxzeSgpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRXJyb3IpLnRvQmVGYWxzeSgpO1xyXG59KTtcclxuXHJcbml0KCdzaG91bGQgZmV0Y2ggYm9va3MgYW5kIHN0YXRlIHVwZGF0ZSBvbiBxdWVyeSBjaGFuZ2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBib29rcyA9IFtcclxuICAgICAgICB7IGtleTogJ2tleTEnLCB0aXRsZTogJ1RpdGxlIDEnLCBhdXRob3JfbmFtZTogWydBdXRob3IgbmFtZSAxJ10sIGZpcnN0X3B1Ymxpc2hfeWVhcjogMX0sXHJcbiAgICAgICAgeyBrZXk6ICdrZXkyJywgdGl0bGU6ICdUaXRsZSAyJywgYXV0aG9yX25hbWU6IFsnQXV0aG9yIG5hbWUgMiddLCBmaXJzdF9wdWJsaXNoX3llYXI6IDF9XHJcbiAgICBdO1xyXG5cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIGZldGNoSXNPcGVuTGlicmFyeS5tb2NrUmVzb2x2ZWRWYWx1ZShib29rcyk7XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlT3BlbkxpYnJhcnkoJ3Rlc3QnKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVUcnV0aHkoKTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVGYWxzeSgpKTtcclxuXHJcbiAgICBleHBlY3QoZmV0Y2hJc09wZW5MaWJyYXJ5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICBleHBlY3QoZmV0Y2hJc09wZW5MaWJyYXJ5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndGVzdCcpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmJvb2tzKS50b0VxdWFsKGJvb2tzKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0Vycm9yKS50b0JlRmFsc3koKTtcclxufSk7XHJcblxyXG5pdCgnc2hvdWxkIGhhbmRsZSBmZXRjaCBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBmZXRjaElzT3BlbkxpYnJhcnkubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2gnKSk7XHJcblxyXG4gICAgY29uc3QgeyByZXN1bHQgfSA9IHJlbmRlckhvb2soKCkgPT4gdXNlT3BlbkxpYnJhcnkoJ3Rlc3QnKSk7XHJcblxyXG4gICAgYWN0KCgpID0+IHtcclxuICAgICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNTAwKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVUcnV0aHkoKTtcclxuXHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVGYWxzeSgpKTtcclxuXHJcbiAgICBleHBlY3QoZmV0Y2hJc09wZW5MaWJyYXJ5KS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XHJcbiAgICBleHBlY3QoZmV0Y2hJc09wZW5MaWJyYXJ5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgndGVzdCcpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmJvb2tzKS50b0VxdWFsKFtdKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0Vycm9yKS50b0JlVHJ1dGh5KCk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=