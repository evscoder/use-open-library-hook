b770a0ce56bace32f4429d03af25038a
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("@testing-library/react");
const fetchIsOpenLibrary_1 = __importDefault(require("../api/fetchIsOpenLibrary"));
const useOpenLibrary_1 = __importDefault(require("./useOpenLibrary"));
const test_utils_1 = require("react-dom/test-utils");
const mockFetchFunc = jest.fn(fetchIsOpenLibrary_1.default);
beforeEach(() => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    mockFetchFunc.mockClear();
    jest.useFakeTimers();
});
afterEach(() => {
    jest.useRealTimers();
});
it('should return initial state', () => {
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)(''));
    expect(result.current.books).toEqual([]);
    expect(result.current.isLoading).toBeFalsy();
    expect(result.current.isError).toBeFalsy();
});
it('should fetch books and state update on query change', async () => {
    const books = [
        { key: 'key1', title: 'Title 1', author_name: ['Author name 1'], first_publish_year: 1 },
        { key: 'key2', title: 'Title 2', author_name: ['Author name 2'], first_publish_year: 1 }
    ];
    mockFetchFunc.mockResolvedValue(books);
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)('test'));
    (0, test_utils_1.act)(() => {
        jest.advanceTimersByTime(500);
    });
    expect(result.current.isLoading).toBeTruthy();
    await (0, react_1.waitFor)(() => expect(result.current.isLoading).toBeFalsy());
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledTimes(1);
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledWith('test');
    expect(result.current.books).toEqual(books);
    expect(result.current.isError).toBeFalsy();
});
// it('should handle fetch errors', async () => {
//     mockFetchFunc.mockRejectedValue(new Error('Failed to fetch'));
//
//     const { result } = renderHook(() => useOpenLibrary('test'));
//
//     act(() => {
//         jest.advanceTimersByTime(500);
//     });
//
//     expect(result.current.isLoading).toBeTruthy();
//
//     await waitFor(() => expect(result.current.isLoading).toBeFalsy());
//
//     expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);
//     expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');
//     expect(result.current.books).toEqual([]);
//     expect(result.current.isError).toBeTruthy();
// });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXFByb2plY3RzXFxyZWFjdC11c2UtaG9va1xcc3JjXFxob29rc1xcdXNlT3BlbkxpYnJhcnkudGVzdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxrREFBMkQ7QUFDM0QsbUZBQTJEO0FBQzNELHNFQUE4QztBQUM5QyxxREFBeUM7QUFFekMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyw0QkFBa0IsQ0FBQyxDQUFDO0FBRWxELFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDWiw2REFBNkQ7SUFDOUQsYUFBYTtJQUNaLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ1gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtJQUNuQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxrQkFBVSxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsd0JBQWMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXhELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN6QyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM3QyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUMvQyxDQUFDLENBQUMsQ0FBQztBQUVILEVBQUUsQ0FBQyxxREFBcUQsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNqRSxNQUFNLEtBQUssR0FBRztRQUNWLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsRUFBQztRQUN2RixFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLEVBQUM7S0FDMUYsQ0FBQztJQUVGLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV2QyxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxrQkFBVSxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsd0JBQWMsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRTVELElBQUEsZ0JBQUcsRUFBQyxHQUFHLEVBQUU7UUFDTCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUU5QyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFFbEUsTUFBTSxDQUFDLDRCQUFrQixDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLDRCQUFrQixDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQy9DLENBQUMsQ0FBQyxDQUFDO0FBRUgsaURBQWlEO0FBQ2pELHFFQUFxRTtBQUNyRSxFQUFFO0FBQ0YsbUVBQW1FO0FBQ25FLEVBQUU7QUFDRixrQkFBa0I7QUFDbEIseUNBQXlDO0FBQ3pDLFVBQVU7QUFDVixFQUFFO0FBQ0YscURBQXFEO0FBQ3JELEVBQUU7QUFDRix5RUFBeUU7QUFDekUsRUFBRTtBQUNGLDJEQUEyRDtBQUMzRCwrREFBK0Q7QUFDL0QsZ0RBQWdEO0FBQ2hELG1EQUFtRDtBQUNuRCxNQUFNIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkU6XFxQcm9qZWN0c1xccmVhY3QtdXNlLWhvb2tcXHNyY1xcaG9va3NcXHVzZU9wZW5MaWJyYXJ5LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVuZGVySG9vaywgd2FpdEZvcn0gZnJvbSBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjtcclxuaW1wb3J0IGZldGNoSXNPcGVuTGlicmFyeSBmcm9tIFwiLi4vYXBpL2ZldGNoSXNPcGVuTGlicmFyeVwiO1xyXG5pbXBvcnQgdXNlT3BlbkxpYnJhcnkgZnJvbSBcIi4vdXNlT3BlbkxpYnJhcnlcIjtcclxuaW1wb3J0IHthY3R9IGZyb20gXCJyZWFjdC1kb20vdGVzdC11dGlsc1wiO1xyXG5cclxuY29uc3QgbW9ja0ZldGNoRnVuYyA9IGplc3QuZm4oZmV0Y2hJc09wZW5MaWJyYXJ5KTtcclxuXHJcbmJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxyXG4gICAvLyBAdHMtaWdub3JlXHJcbiAgICBtb2NrRmV0Y2hGdW5jLm1vY2tDbGVhcigpO1xyXG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XHJcbn0pO1xyXG5cclxuYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xyXG59KTtcclxuXHJcbml0KCdzaG91bGQgcmV0dXJuIGluaXRpYWwgc3RhdGUnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VPcGVuTGlicmFyeSgnJykpO1xyXG5cclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5ib29rcykudG9FcXVhbChbXSk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlRmFsc3koKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0Vycm9yKS50b0JlRmFsc3koKTtcclxufSk7XHJcblxyXG5pdCgnc2hvdWxkIGZldGNoIGJvb2tzIGFuZCBzdGF0ZSB1cGRhdGUgb24gcXVlcnkgY2hhbmdlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgYm9va3MgPSBbXHJcbiAgICAgICAgeyBrZXk6ICdrZXkxJywgdGl0bGU6ICdUaXRsZSAxJywgYXV0aG9yX25hbWU6IFsnQXV0aG9yIG5hbWUgMSddLCBmaXJzdF9wdWJsaXNoX3llYXI6IDF9LFxyXG4gICAgICAgIHsga2V5OiAna2V5MicsIHRpdGxlOiAnVGl0bGUgMicsIGF1dGhvcl9uYW1lOiBbJ0F1dGhvciBuYW1lIDInXSwgZmlyc3RfcHVibGlzaF95ZWFyOiAxfVxyXG4gICAgXTtcclxuXHJcbiAgICBtb2NrRmV0Y2hGdW5jLm1vY2tSZXNvbHZlZFZhbHVlKGJvb2tzKTtcclxuXHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VPcGVuTGlicmFyeSgndGVzdCcpKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg1MDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZVRydXRoeSgpO1xyXG5cclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZUZhbHN5KCkpO1xyXG5cclxuICAgIGV4cGVjdChmZXRjaElzT3BlbkxpYnJhcnkpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICAgIGV4cGVjdChmZXRjaElzT3BlbkxpYnJhcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0Jyk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYm9va3MpLnRvRXF1YWwoYm9va3MpO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRXJyb3IpLnRvQmVGYWxzeSgpO1xyXG59KTtcclxuXHJcbi8vIGl0KCdzaG91bGQgaGFuZGxlIGZldGNoIGVycm9ycycsIGFzeW5jICgpID0+IHtcclxuLy8gICAgIG1vY2tGZXRjaEZ1bmMubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdGYWlsZWQgdG8gZmV0Y2gnKSk7XHJcbi8vXHJcbi8vICAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VPcGVuTGlicmFyeSgndGVzdCcpKTtcclxuLy9cclxuLy8gICAgIGFjdCgoKSA9PiB7XHJcbi8vICAgICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDUwMCk7XHJcbi8vICAgICB9KTtcclxuLy9cclxuLy8gICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5pc0xvYWRpbmcpLnRvQmVUcnV0aHkoKTtcclxuLy9cclxuLy8gICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZUZhbHN5KCkpO1xyXG4vL1xyXG4vLyAgICAgZXhwZWN0KGZldGNoSXNPcGVuTGlicmFyeSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4vLyAgICAgZXhwZWN0KGZldGNoSXNPcGVuTGlicmFyeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3QnKTtcclxuLy8gICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5ib29rcykudG9FcXVhbChbXSk7XHJcbi8vICAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNFcnJvcikudG9CZVRydXRoeSgpO1xyXG4vLyB9KTtcclxuIl0sInZlcnNpb24iOjN9