{"file":"E:\\Projects\\react-use-hook\\src\\hooks\\useOpenLibrary.test.tsx","mappings":"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","names":[],"sources":["E:\\Projects\\react-use-hook\\src\\hooks\\useOpenLibrary.test.tsx"],"sourcesContent":["import fetchIsOpenLibrary from \"../api/fetchIsOpenLibrary\";\r\nimport {renderHook, waitFor} from \"@testing-library/react\";\r\nimport useOpenLibrary from \"./useOpenLibrary\";\r\nimport {act} from \"react-dom/test-utils\";\r\n\r\nconst mockFetchFunc = jest.fn(fetchIsOpenLibrary);\r\n\r\nbeforeEach(() => {\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n   // @ts-ignore\r\n    mockFetchFunc.mockClear();\r\n    jest.useFakeTimers();\r\n});\r\n\r\nafterEach(() => {\r\n    jest.useRealTimers();\r\n});\r\n\r\nit('should fetch books and state update on query change', async () => {\r\n    const books = [\r\n        { key: 'key1', title: 'Title 1', author_name: ['Author name 1'], first_publish_year: 1},\r\n        { key: 'key2', title: 'Title 2', author_name: ['Author name 2'], first_publish_year: 1}\r\n    ];\r\n\r\n    mockFetchFunc.mockResolvedValue(books);\r\n\r\n    const { result } = renderHook(() => useOpenLibrary('test'));\r\n\r\n    act(() => {\r\n        jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    expect(result.current.isLoading).toBeTruthy();\r\n\r\n    await waitFor(() => expect(result.current.isLoading).toBeFalsy());\r\n\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');\r\n    expect(result.current.books).toEqual(books);\r\n    expect(result.current.isError).toBeFalsy();\r\n});\r\n\r\nit('should handle fetch errors', async () => {\r\n    mockFetchFunc.mockRejectedValue(new Error('Failed to fetch'));\r\n\r\n    const { result } = renderHook(() => useOpenLibrary('test'));\r\n\r\n    act(() => {\r\n        jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    expect(result.current.isLoading).toBeTruthy();\r\n\r\n    await waitFor(() => expect(result.current.isLoading).toBeFalsy());\r\n\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');\r\n    expect(result.current.books).toEqual([]);\r\n    expect(result.current.isError).toBeTruthy();\r\n});\r\n"],"version":3}