272a2ca7d5baa83e2a6623ff7197e60b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fetchIsOpenLibrary_1 = __importDefault(require("../api/fetchIsOpenLibrary"));
const react_1 = require("@testing-library/react");
const useOpenLibrary_1 = __importDefault(require("./useOpenLibrary"));
const test_utils_1 = require("react-dom/test-utils");
const mockFetchFunc = jest.fn(fetchIsOpenLibrary_1.default);
beforeEach(() => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    mockFetchFunc.mockClear();
    jest.useFakeTimers();
});
afterEach(() => {
    jest.useRealTimers();
});
it('should fetch books and state update on query change', async () => {
    const books = [
        { key: 'key1', title: 'Title 1', author_name: ['Author name 1'], first_publish_year: 1 },
        { key: 'key2', title: 'Title 2', author_name: ['Author name 2'], first_publish_year: 1 }
    ];
    mockFetchFunc.mockResolvedValue(books);
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)('test'));
    (0, test_utils_1.act)(() => {
        jest.advanceTimersByTime(500);
    });
    expect(result.current.isLoading).toBeTruthy();
    await (0, react_1.waitFor)(() => expect(result.current.isLoading).toBeFalsy());
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledTimes(1);
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledWith('test');
    expect(result.current.books).toEqual(books);
    expect(result.current.isError).toBeFalsy();
});
it('should handle fetch errors', async () => {
    mockFetchFunc.mockRejectedValue(new Error('Failed to fetch'));
    const { result } = (0, react_1.renderHook)(() => (0, useOpenLibrary_1.default)('test'));
    (0, test_utils_1.act)(() => {
        jest.advanceTimersByTime(500);
    });
    expect(result.current.isLoading).toBeTruthy();
    await (0, react_1.waitFor)(() => expect(result.current.isLoading).toBeFalsy());
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledTimes(1);
    expect(fetchIsOpenLibrary_1.default).toHaveBeenCalledWith('test');
    expect(result.current.books).toEqual([]);
    expect(result.current.isError).toBeTruthy();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiRTpcXFByb2plY3RzXFxyZWFjdC11c2UtaG9va1xcc3JjXFxob29rc1xcdXNlT3BlbkxpYnJhcnkudGVzdC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxtRkFBMkQ7QUFDM0Qsa0RBQTJEO0FBQzNELHNFQUE4QztBQUM5QyxxREFBeUM7QUFFekMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyw0QkFBa0IsQ0FBQyxDQUFDO0FBRWxELFVBQVUsQ0FBQyxHQUFHLEVBQUU7SUFDWiw2REFBNkQ7SUFDOUQsYUFBYTtJQUNaLGFBQWEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUMxQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDekIsQ0FBQyxDQUFDLENBQUM7QUFFSCxTQUFTLENBQUMsR0FBRyxFQUFFO0lBQ1gsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBQ3pCLENBQUMsQ0FBQyxDQUFDO0FBRUgsRUFBRSxDQUFDLHFEQUFxRCxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ2pFLE1BQU0sS0FBSyxHQUFHO1FBQ1YsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxFQUFDO1FBQ3ZGLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLENBQUMsRUFBQztLQUMxRixDQUFDO0lBRUYsYUFBYSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXZDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFBLGtCQUFVLEVBQUMsR0FBRyxFQUFFLENBQUMsSUFBQSx3QkFBYyxFQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFNUQsSUFBQSxnQkFBRyxFQUFDLEdBQUcsRUFBRTtRQUNMLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRTlDLE1BQU0sSUFBQSxlQUFPLEVBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUVsRSxNQUFNLENBQUMsNEJBQWtCLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsNEJBQWtCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDL0MsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDeEMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztJQUU5RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBQSxrQkFBVSxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUEsd0JBQWMsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRTVELElBQUEsZ0JBQUcsRUFBQyxHQUFHLEVBQUU7UUFDTCxJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUU5QyxNQUFNLElBQUEsZUFBTyxFQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFFbEUsTUFBTSxDQUFDLDRCQUFrQixDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDcEQsTUFBTSxDQUFDLDRCQUFrQixDQUFDLENBQUMsb0JBQW9CLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ2hELENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkU6XFxQcm9qZWN0c1xccmVhY3QtdXNlLWhvb2tcXHNyY1xcaG9va3NcXHVzZU9wZW5MaWJyYXJ5LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmZXRjaElzT3BlbkxpYnJhcnkgZnJvbSBcIi4uL2FwaS9mZXRjaElzT3BlbkxpYnJhcnlcIjtcclxuaW1wb3J0IHtyZW5kZXJIb29rLCB3YWl0Rm9yfSBmcm9tIFwiQHRlc3RpbmctbGlicmFyeS9yZWFjdFwiO1xyXG5pbXBvcnQgdXNlT3BlbkxpYnJhcnkgZnJvbSBcIi4vdXNlT3BlbkxpYnJhcnlcIjtcclxuaW1wb3J0IHthY3R9IGZyb20gXCJyZWFjdC1kb20vdGVzdC11dGlsc1wiO1xyXG5cclxuY29uc3QgbW9ja0ZldGNoRnVuYyA9IGplc3QuZm4oZmV0Y2hJc09wZW5MaWJyYXJ5KTtcclxuXHJcbmJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxyXG4gICAvLyBAdHMtaWdub3JlXHJcbiAgICBtb2NrRmV0Y2hGdW5jLm1vY2tDbGVhcigpO1xyXG4gICAgamVzdC51c2VGYWtlVGltZXJzKCk7XHJcbn0pO1xyXG5cclxuYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIGplc3QudXNlUmVhbFRpbWVycygpO1xyXG59KTtcclxuXHJcbml0KCdzaG91bGQgZmV0Y2ggYm9va3MgYW5kIHN0YXRlIHVwZGF0ZSBvbiBxdWVyeSBjaGFuZ2UnLCBhc3luYyAoKSA9PiB7XHJcbiAgICBjb25zdCBib29rcyA9IFtcclxuICAgICAgICB7IGtleTogJ2tleTEnLCB0aXRsZTogJ1RpdGxlIDEnLCBhdXRob3JfbmFtZTogWydBdXRob3IgbmFtZSAxJ10sIGZpcnN0X3B1Ymxpc2hfeWVhcjogMX0sXHJcbiAgICAgICAgeyBrZXk6ICdrZXkyJywgdGl0bGU6ICdUaXRsZSAyJywgYXV0aG9yX25hbWU6IFsnQXV0aG9yIG5hbWUgMiddLCBmaXJzdF9wdWJsaXNoX3llYXI6IDF9XHJcbiAgICBdO1xyXG5cclxuICAgIG1vY2tGZXRjaEZ1bmMubW9ja1Jlc29sdmVkVmFsdWUoYm9va3MpO1xyXG5cclxuICAgIGNvbnN0IHsgcmVzdWx0IH0gPSByZW5kZXJIb29rKCgpID0+IHVzZU9wZW5MaWJyYXJ5KCd0ZXN0JykpO1xyXG5cclxuICAgIGFjdCgoKSA9PiB7XHJcbiAgICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDUwMCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlVHJ1dGh5KCk7XHJcblxyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PiBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNMb2FkaW5nKS50b0JlRmFsc3koKSk7XHJcblxyXG4gICAgZXhwZWN0KGZldGNoSXNPcGVuTGlicmFyeSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xyXG4gICAgZXhwZWN0KGZldGNoSXNPcGVuTGlicmFyeSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3Rlc3QnKTtcclxuICAgIGV4cGVjdChyZXN1bHQuY3VycmVudC5ib29rcykudG9FcXVhbChib29rcyk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuaXNFcnJvcikudG9CZUZhbHN5KCk7XHJcbn0pO1xyXG5cclxuaXQoJ3Nob3VsZCBoYW5kbGUgZmV0Y2ggZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgbW9ja0ZldGNoRnVuYy5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCcpKTtcclxuXHJcbiAgICBjb25zdCB7IHJlc3VsdCB9ID0gcmVuZGVySG9vaygoKSA9PiB1c2VPcGVuTGlicmFyeSgndGVzdCcpKTtcclxuXHJcbiAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg1MDApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZVRydXRoeSgpO1xyXG5cclxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4gZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzTG9hZGluZykudG9CZUZhbHN5KCkpO1xyXG5cclxuICAgIGV4cGVjdChmZXRjaElzT3BlbkxpYnJhcnkpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcclxuICAgIGV4cGVjdChmZXRjaElzT3BlbkxpYnJhcnkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCd0ZXN0Jyk7XHJcbiAgICBleHBlY3QocmVzdWx0LmN1cnJlbnQuYm9va3MpLnRvRXF1YWwoW10pO1xyXG4gICAgZXhwZWN0KHJlc3VsdC5jdXJyZW50LmlzRXJyb3IpLnRvQmVUcnV0aHkoKTtcclxufSk7XHJcbiJdLCJ2ZXJzaW9uIjozfQ==