[["E:\\Projects\\react-use-hook\\jestSetupFile.ts",{"fileContent":"import { TextEncoder } from 'util';\r\n\r\nObject.defineProperty(window, 'TextEncoder', {\r\n    writable: true,\r\n    value: TextEncoder,\r\n});\r\n","resolvedModuleNames":[]}],["E:\\Projects\\react-use-hook\\src\\App.test.tsx",{"fileContent":"import {render} from '@testing-library/react';\r\nimport '@testing-library/jest-dom';\r\nimport '@testing-library/jest-dom/extend-expect';\r\nimport App from './App';\r\ntest('should main title test hello', () => {\r\n    const { getByTestId } = render(\r\n        <App />\r\n    );\r\n\r\n    const title = getByTestId('main-title');\r\n    expect(title.textContent).toBe('Hello');\r\n});\r\n","resolvedModuleNames":["E:/Projects/react-use-hook/src/App.tsx"]}],["E:\\Projects\\react-use-hook\\src\\App.tsx",{"fileContent":"import './App.css';\nfunction App() {\n    return (\n        <h1 data-testid={'main-title'}>Hello</h1>\n    );\n\n}\n\nexport default App\n","resolvedModuleNames":[]}],["E:\\Projects\\react-use-hook\\src\\hooks\\useOpenLibrary.test.tsx",{"fileContent":"import {renderHook, waitFor} from \"@testing-library/react\";\r\nimport fetchIsOpenLibrary from \"../api/fetchIsOpenLibrary\";\r\nimport useOpenLibrary from \"./useOpenLibrary\";\r\nimport {act} from \"react-dom/test-utils\";\r\n\r\njest.mock('../api/fetchIsOpenLibrary');\r\n\r\nconst mockFetchIsOpenLibrary = jest.mocked(fetchIsOpenLibrary);\r\n\r\nbeforeEach(() => {\r\n   // @ts-ignore\r\n    mockFetchIsOpenLibrary.mockClear();\r\n    jest.useFakeTimers();\r\n});\r\n\r\nafterEach(() => {\r\n    jest.useRealTimers();\r\n});\r\n\r\nit('should return initial state', () => {\r\n    const { result } = renderHook(() => useOpenLibrary(''));\r\n\r\n    expect(result.current.books).toEqual([]);\r\n    expect(result.current.isLoading).toBeFalsy();\r\n    expect(result.current.isError).toBeFalsy();\r\n});\r\n\r\nit('should fetch books and state update on query change', async () => {\r\n    const books = [\r\n        { key: 'key1', title: 'Title 1', author_name: ['Author name 1'], first_publish_year: 1},\r\n        { key: 'key2', title: 'Title 2', author_name: ['Author name 2'], first_publish_year: 1}\r\n    ];\r\n\r\n    // @ts-ignore\r\n    mockFetchIsOpenLibrary.mockResolvedValue(books);\r\n\r\n    const { result } = renderHook(() => useOpenLibrary('test'));\r\n\r\n    act(() => {\r\n        jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    expect(result.current.isLoading).toBeTruthy();\r\n\r\n    await waitFor(() => expect(result.current.isLoading).toBeFalsy());\r\n\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');\r\n    expect(result.current.books).toEqual(books);\r\n    expect(result.current.isError).toBeFalsy();\r\n});\r\n\r\nit('should handle fetch errors', async () => {\r\n    // @ts-ignore\r\n    mockFetchIsOpenLibrary.mockRejectedValue(new Error('Failed to fetch'));\r\n\r\n    const { result } = renderHook(() => useOpenLibrary('test'));\r\n\r\n    act(() => {\r\n        jest.advanceTimersByTime(500);\r\n    });\r\n\r\n    expect(result.current.isLoading).toBeTruthy();\r\n\r\n    await waitFor(() => expect(result.current.isLoading).toBeFalsy());\r\n\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledTimes(1);\r\n    expect(fetchIsOpenLibrary).toHaveBeenCalledWith('test');\r\n    expect(result.current.books).toEqual([]);\r\n    expect(result.current.isError).toBeTruthy();\r\n});\r\n","resolvedModuleNames":["E:/Projects/react-use-hook/src/api/fetchIsOpenLibrary.tsx","E:/Projects/react-use-hook/src/hooks/useOpenLibrary.tsx"]}],["E:\\Projects\\react-use-hook\\src\\api\\fetchIsOpenLibrary.tsx",{"fileContent":"import corsHeaders from \"./api\";\r\n\r\nconst fetchIsOpenLibrary = async (query: string) => {\r\n    // @ts-ignore\r\n    const response = await fetch(`https://openlibrary.org/search.json?q=${query}`, {\r\n        headers: corsHeaders\r\n    });\r\n    const result = await response.json();\r\n\r\n    return result.docs;\r\n};\r\n\r\nexport default fetchIsOpenLibrary;\r\n","resolvedModuleNames":["E:/Projects/react-use-hook/src/api/api.tsx"]}],["E:\\Projects\\react-use-hook\\src\\hooks\\useOpenLibrary.tsx",{"fileContent":"import {useEffect, useRef, useState} from \"react\";\r\nimport fetchIsOpenLibrary from \"../api/fetchIsOpenLibrary\";\r\n\r\nconst useOpenLibrary = (query: string) => {\r\n    const [books, setBooks] = useState([]);\r\n    const [isLoading, setLoading] = useState<boolean>(false);\r\n    const [isError, setError] = useState<boolean>(false);\r\n    const timeoutRef = useRef<any>(null);\r\n\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        try {\r\n            const result = await fetchIsOpenLibrary(query);\r\n\r\n            setBooks(result);\r\n        } catch (error) {\r\n            setError(true);\r\n            // console.error(error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!query || query.trim() === '') {\r\n            setBooks([]);\r\n\r\n            return;\r\n        } else {\r\n            clearTimeout(timeoutRef.current);\r\n            timeoutRef.current = setTimeout(() => {\r\n                fetchData();\r\n            }, 500);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(timeoutRef.current);\r\n        };\r\n    }, [query]);\r\n\r\n    return { books, isLoading, isError };\r\n};\r\n\r\nexport default useOpenLibrary;\r\n","resolvedModuleNames":["E:/Projects/react-use-hook/src/api/fetchIsOpenLibrary.tsx","E:/Projects/react-use-hook/src/api/api.tsx"]}],["E:\\Projects\\react-use-hook\\src\\api\\api.tsx",{"fileContent":"const corsHeaders = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\r\n}\r\n\r\nexport default corsHeaders;\r\n","resolvedModuleNames":[]}]]